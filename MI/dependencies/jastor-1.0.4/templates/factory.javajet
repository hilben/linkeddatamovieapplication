<% //(C) Copyright IBM Corporation 2005  All Rights Reserved. %>

<% // author: Ben Szekely (<a href="mailto:bhszekel@us.ibm.com">bhszekel@us.ibm.com</a>) %>
<%@ jet skeleton="ontology.skeleton"
		package="com.ibm.adtech.jastor.jet"
		class="FactoryTemplate"
		imports="java.util.* com.ibm.adtech.jastor.* com.ibm.adtech.jastor.inference.*" %>
<% String pkgstr = ont.getPackage(); %>
<% JastorContext ctx = ont.getContext(); %>

package <%=pkgstr%>;

import com.ibm.adtech.jastor.*;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.rdf.model.StmtIterator;
import com.hp.hpl.jena.vocabulary.RDF;

/**
 * Factory for instantiating objects for ontology classes in the <%=ont.getLocalName()%> ontology.  The
 * get methods leave the model unchanged and return a Java view of the object in the model.  The create methods
 * may add certain baseline properties to the model such as rdf:type and any properties with hasValue restrictions.
 * <p>(URI: <%=ont.getURI() %>)</p>
 * <br>
<% if (ont.getComment().listRDFSPropertyNames().length > 0) { %>
 * RDF Schema Standard Properties <br>
<% 	String[] names = ont.getComment().listRDFSPropertyNames(); %>
<% 	for (int i=0;i<names.length;i++) { %>
 * 	<%=names[i] + " : " + ont.getComment().getRDFSProperty(names[i])%> <br>
<% 	} %>
<% } %>
 * <br>
<% if (ont.getComment().listDCPropertyNames().length > 0) { %>
 * Dublin Core Standard Properties <br>
<% 	String[] names = ont.getComment().listDCPropertyNames(); %>
<% 	for (int i=0;i<names.length;i++) { %>
 * 	<%=names[i] + " : " + ont.getComment().getDCProperty(names[i])%> <br>
<% 	} %>
<% } %>
 * <br>
<% if (ont.getComment().getVersionInfo() != null) { %>
 *	@version <%=ont.getComment().getVersionInfo()%>
<% } %>
 */
public class <%=ont.getFactoryClassname()%> extends <%=ctx.getThingFactory().getName()%> { 


<% for(Iterator iter = ont.getClasses().iterator(); iter.hasNext();) {%>
<% OntologyClass oc = (OntologyClass)iter.next();%>

	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Adds the rdf:type property for the given resource to the model.
	 * @param resource The resource of the <%=oc.getInterfaceClassname()%>
	 * @param model the Jena Model.
	 */
	public static <%=oc.getInterfaceClassname()%> create<%=oc.getInterfaceClassname()%>(Resource resource, Model model) throws JastorException {
		return <%=oc.getImplFullClassname()%>.create<%=oc.getInterfaceClassname()%>(resource,model);
	}
	
	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Adds the rdf:type property for the given resource to the model.
	 * @param uri The uri of the <%=oc.getInterfaceClassname()%>
	 * @param model the Jena Model.
	 */
	public static <%=oc.getInterfaceClassname()%> create<%=oc.getInterfaceClassname()%>(String uri, Model model) throws JastorException {
		<%=oc.getInterfaceClassname()%> obj = <%=oc.getImplFullClassname()%>.create<%=oc.getInterfaceClassname()%>(model.createResource(uri), model);
		return obj;
	}
	
	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Leaves the model unchanged.
	 * @param uri The uri of the <%=oc.getInterfaceClassname()%>
	 * @param model the Jena Model.
	 */
	public static <%=oc.getInterfaceClassname()%> get<%=oc.getInterfaceClassname()%>(String uri, Model model) throws JastorException {
		return get<%=oc.getInterfaceClassname()%>(model.createResource(uri),model);
	}
	
	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Leaves the model unchanged.
	 * @param resource The resource of the <%=oc.getInterfaceClassname()%>
	 * @param model the Jena Model.
	 */
	public static <%=oc.getInterfaceClassname()%> get<%=oc.getInterfaceClassname()%>(Resource resource, Model model) throws JastorException {
<% 	if (ctx.isGenerateCacheInFactory()) { %>
		String code = (model.hashCode()*17 + <%=oc.getInterfaceFullClassname()%>.class.hashCode()) + resource.toString();
		<%=oc.getImplFullClassname()%> obj = (<%=oc.getImplFullClassname()%>)objects.get(code);
		if (obj == null) {
			obj = <%=oc.getImplFullClassname()%>.get<%=oc.getInterfaceClassname()%>(resource, model);
			if (obj == null)
				return null;
			objects.put(code, obj);
		}
		return obj;
<% 	} else { %>
		<%=oc.getInterfaceClassname()%> obj = <%=oc.getImplFullClassname()%>.get<%=oc.getInterfaceClassname()%>(resource, model);
		return obj;
<% 	} %>
	}
	
	/**
	 * Return an instance of <%=oc.getInterfaceClassname()%> for every resource in the model with rdf:Type <%=oc.getURI()%>
	 * @param model the Jena Model
	 * @return a List of <%=oc.getInterfaceClassname()%>
	 */
	public static java.util.List getAll<%=oc.getInterfaceClassname()%>(Model model) throws JastorException {
		StmtIterator it = model.listStatements(null,RDF.type,<%=oc.getInterfaceClassname()%>.TYPE);
		java.util.List list = new java.util.ArrayList();
		while (it.hasNext()) {
			Statement stmt = it.nextStatement();
			list.add(get<%=oc.getInterfaceClassname()%>(stmt.getSubject(),model));
		}
		return list;
	}
	
<% } %>
	
	/**
	 * Returns an instance of an interface for the given Resource.  The return instance is guaranteed to 
	 * implement the most specific interface in *some* hierarchy in which the Resource participates.  The behavior
	 * is unspecified for resources with RDF types from different hierarchies.
	 * @return an instance of Thing
	 */
	public static Thing getThing(com.hp.hpl.jena.rdf.model.Resource res, com.hp.hpl.jena.rdf.model.Model model) throws JastorException {
<% for(Iterator iter = ont.getClassesSorted().iterator(); iter.hasNext();) {%>
<% OntologyClass oc = (OntologyClass)iter.next();%>
		if (res.hasProperty(RDF.type,model.getResource("<%=oc.getURI()%>"))) {
			return get<%=oc.getInterfaceClassname()%>(res,model);
		}
<% } %>
		return new ThingImpl(res,model);
	}
	
	/**
	 * Returns an instance of an interface for the given Resource URI.  The return instance is guaranteed to 
	 * implement the most specific interface in *some* hierarchy in which the Resource participates.  The behavior
	 * is unspecified for resources with RDF types from different hierarchies.
	 * @return an instance of Thing
	 */
	public static Thing getThing(String uri, com.hp.hpl.jena.rdf.model.Model model) throws JastorException {
		return getThing(model.getResource(uri),model);
	}

	/**
	 * Return a list of compatible interfaces for the given type.  Searches through all ontology classes
	 * in the <%=ont.getLocalName()%> ontology.  The list is sorted according to the topological sort
	 * of the class hierarchy
	 * @return a List of type java.lang.Class
	 */
	public static java.util.List listCompatibleInterfaces (com.hp.hpl.jena.rdf.model.Resource type) {
		java.util.List types = new java.util.ArrayList();
<% for(Iterator iter = ont.getClassesSorted().iterator(); iter.hasNext();) {%>
<% OntologyClass oc = (OntologyClass)iter.next();%>
		if (type.equals(<%=oc.getInterfaceFullClassname()%>.TYPE)) {
			types.add(<%=oc.getInterfaceFullClassname()%>.class);
		}
<% } %>
		return types;
	}
}